// Code generated by mockery. DO NOT EDIT.

package auth

import (
	context "context"

	eventModel "github.com/Tbits007/auth/internal/domain/models/eventModel"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockEventRepo is an autogenerated mock type for the EventRepo type
type MockEventRepo struct {
	mock.Mock
}

type MockEventRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepo) EXPECT() *MockEventRepo_Expecter {
	return &MockEventRepo_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: ctx, Event
func (_m *MockEventRepo) Save(ctx context.Context, Event eventModel.Event) (uuid.UUID, error) {
	ret := _m.Called(ctx, Event)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, eventModel.Event) (uuid.UUID, error)); ok {
		return rf(ctx, Event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, eventModel.Event) uuid.UUID); ok {
		r0 = rf(ctx, Event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, eventModel.Event) error); ok {
		r1 = rf(ctx, Event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockEventRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - Event eventModel.Event
func (_e *MockEventRepo_Expecter) Save(ctx interface{}, Event interface{}) *MockEventRepo_Save_Call {
	return &MockEventRepo_Save_Call{Call: _e.mock.On("Save", ctx, Event)}
}

func (_c *MockEventRepo_Save_Call) Run(run func(ctx context.Context, Event eventModel.Event)) *MockEventRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(eventModel.Event))
	})
	return _c
}

func (_c *MockEventRepo_Save_Call) Return(_a0 uuid.UUID, _a1 error) *MockEventRepo_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepo_Save_Call) RunAndReturn(run func(context.Context, eventModel.Event) (uuid.UUID, error)) *MockEventRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventRepo creates a new instance of MockEventRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventRepo {
	mock := &MockEventRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
