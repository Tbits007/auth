// Code generated by mockery. DO NOT EDIT.

package auth

import (
	context "context"

	userModel "github.com/Tbits007/auth/internal/domain/models/userModel"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepo) GetByEmail(ctx context.Context, email string) (*userModel.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userModel.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userModel.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepo_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepo_GetByEmail_Call {
	return &MockUserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepo_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) Return(_a0 *userModel.User, _a1 error) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*userModel.User, error)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// IsAdmin provides a mock function with given fields: ctx, userID
func (_m *MockUserRepo) IsAdmin(ctx context.Context, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type MockUserRepo_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockUserRepo_Expecter) IsAdmin(ctx interface{}, userID interface{}) *MockUserRepo_IsAdmin_Call {
	return &MockUserRepo_IsAdmin_Call{Call: _e.mock.On("IsAdmin", ctx, userID)}
}

func (_c *MockUserRepo_IsAdmin_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockUserRepo_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepo_IsAdmin_Call) Return(_a0 bool, _a1 error) *MockUserRepo_IsAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepo_IsAdmin_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockUserRepo_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *MockUserRepo) Save(ctx context.Context, user userModel.User) (uuid.UUID, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userModel.User) (uuid.UUID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userModel.User) uuid.UUID); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, userModel.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user userModel.User
func (_e *MockUserRepo_Expecter) Save(ctx interface{}, user interface{}) *MockUserRepo_Save_Call {
	return &MockUserRepo_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *MockUserRepo_Save_Call) Run(run func(ctx context.Context, user userModel.User)) *MockUserRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(userModel.User))
	})
	return _c
}

func (_c *MockUserRepo_Save_Call) Return(_a0 uuid.UUID, _a1 error) *MockUserRepo_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepo_Save_Call) RunAndReturn(run func(context.Context, userModel.User) (uuid.UUID, error)) *MockUserRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
